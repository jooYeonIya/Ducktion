name: Ducktion CI/CD

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 트리거

jobs:
  backend:
    runs-on: ubuntu-latest
    steps:
      - name: source code checkout  # 저장소에서 코드 가져오기
        uses: actions/checkout@v4

      - name: JDK install  # 백엔드 빌드를 위한 JDK 17 설정
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
    
      - name: Export Environment Variables  # env 파일 설정
        env:
          DB_URL: ${{ secrets.DB_URL }}
          DB_USERNAME: ${{ secrets.DB_USERNAME }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          MAIL_USERNAME: ${{ secrets.MAIL_USERNAME}}
          MAIL_PASSWORD: ${{ secrets.MAIL_PASSWORD}}
          JWT_KEY: ${ secrets.JWT_KEY }}
          AWS_S3_BUCKET_NAME: ${{ secrets.AWS_S3_BUCKET_NAME }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_S3_REGION: ${{ secrets.AWS_S3_REGION }}
          AWS_S3_BUCKET_DOMAIN: ${{ secrets.AWS_S3_BUCKET_DOMAIN}}
          KAKAO_REST_API_KEY: ${{ secrets.KAKAO_REST_API_KEY }}
        run: |
          echo "DB_URL=${DB_URL}" >> $GITHUB_ENV
          echo "DB_USERNAME=${DB_USERNAME}" >> $GITHUB_ENV
          echo "DB_PASSWORD=${DB_PASSWORD}" >> $GITHUB_ENV
          echo "MAIL_USERNAME=${MAIL_USERNAME}" >> $GITHUB_ENV
          echo "MAIL_PASSWORD=${MAIL_PASSWORD}" >> $GITHUB_ENV
          echo "JWT_KEY=${JWT_KEY}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET_NAME=${AWS_S3_BUCKET_NAME}" >> $GITHUB_ENV
          echo "AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}" >> $GITHUB_ENV
          echo "AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}" >> $GITHUB_ENV
          echo "AWS_S3_REGION=${AWS_S3_REGION}" >> $GITHUB_ENV
          echo "AWS_S3_BUCKET_DOMAIN=${AWS_S3_BUCKET_DOMAIN}" >> $GITHUB_ENV
          echo "KAKAO_REST_API_KEY=${KAKAO_REST_API_KEY}" >> $GITHUB_ENV

      - name: Build Backend   # 빌드 파일 생성
        working-directory: ./be # gradlew 파일이 있는 디렉토리로 설정
        run: ./gradlew build
      
      - name: Build and Push Docker Image for Backend
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          echo "${{ secrets.BE_ENV }}" > ./be/.env
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker build -t jooyeoniya/be:latest ./be
          docker push jooyeoniya/be:latest

  frontend:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'

      - name: Install Dependencies and Build Frontend
        working-directory: ./fe
        run: |
          rm -rf node_modules/.vite
          npm install
          npm run build

      - name: Build and Push Docker Image for Frontend
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker build -t jooyeoniya/fe:latest ./fe
          docker push jooyeoniya/fe:latest

  deploy:
    runs-on: ubuntu-latest
    needs: [backend, frontend]  # 백엔드와 프론트엔드 빌드가 완료된 후 실행
    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}           # EC2 퍼블릭 IP 또는 DNS
          username: ${{ secrets.EC2_USER }}       # EC2 사용자 이름
          key: ${{ secrets.EC2_KEY }}             # EC2 개인 키 
          script_stop: true
          script: |
            # DockerHub에 로그인
            echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u ${{ secrets.DOCKER_USERNAME }} --password-stdin
            
            # Docker 이미지 풀
            docker pull jooyeoniya/be:latest
            docker pull jooyeoniya/fe:latest
            
            # 기존 컨테이너 중지 및 삭제
            docker stop be || true
            docker rm be || true
            docker stop fe || true
            docker rm fe || true
            
            # 새로운 컨테이너 실행 (백엔드)
            docker run -d --name be -p 8080:8080 jooyeoniya/be:latest
            
            # 새로운 컨테이너 실행 (프론트엔드)
            docker run -d --name fe -p 80:80 jooyeoniya/fe:latest

